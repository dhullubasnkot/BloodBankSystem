generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DONOR
  REQUESTER
}

enum BloodGroup {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum RequestStatus {
  PENDING
  APPROVED
  DECLINED
  FULFILLED
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String?  @unique
  phone     String?  @unique
  password  String?
  role      Role     @default(REQUESTER)
  isDonor   Boolean  @default(false)
  donorInfo Donor?
  createdAt DateTime @default(now())

  loginSessions LoginSession[]
  bloodRequests RequestBlood[]
  refreshToken  RefreshToken?

  @@map("users")
}

model Donor {
  id          String     @id @default(uuid())
  userId      String     @unique
  user        User       @relation(fields: [userId], references: [id])
  bloodGroup  BloodGroup
  district    String
  city        String
  lastDonated DateTime?
  available   Boolean    @default(true)
  notes       String?

  @@map("donors")
}

model LoginSession {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  loggedInAt DateTime @default(now())
  success    Boolean

  @@map("login_sessions")
}

model RequestBlood {
  id          String        @id @default(uuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  bloodGroup  BloodGroup
  district    String
  city        String
  status      RequestStatus @default(PENDING)
  requestedAt DateTime      @default(now())
  fulfilledAt DateTime?
  notes       String?

  @@map("blood_requests")
}

model RefreshToken {
  rtoken    String   @db.Text
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  deviceId  String?
  createdAt DateTime @default(now())

  @@map("refreshSession")
}
